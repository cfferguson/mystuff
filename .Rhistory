subtitle = "Bing lexicon") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold"))
pos_neg_bing_track <- tidy_lyrics_nsw %>%
filter(!grepl('[0-9]', word)) %>%
left_join(get_sentiments("bing"), by = "word") %>%
mutate(sentiment = ifelse(is.na(sentiment), 'neutral', sentiment)) %>%
group_by(album, track_title, track_n, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n)
pos_neg_bing_track
pos_neg_bing_track %>%
filter(sentiment != "neutral") %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
labs(x = "Album", y = "Sentiment Count (as %)") +
scale_color_manual(values = c(positive = "#d9534f", negative = "#428bca")) +
ggtitle("Proportion of Positive and Negative Words by Track",
subtitle = "Bing lexicon") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_album_nrc <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("nrc"), by = "word") %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
mutate(sentiment = as.factor(sentiment)) %>%
group_by(album, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n) %>%
ungroup()
emotions_album_nrc
emotions_album_nrc %>%
ggplot() +
geom_boxplot(aes(x = reorder(sentiment, percent), y = percent, fill = sentiment)) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
scale_fill_brewer(palette = "Spectral") +
ggtitle("Distribution of Sentiments by Album") +
labs(x = "Sentiment", y = "Percentage") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
legend.position = "none",
axis.text.x = element_text(size = 11, face = "bold"),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free")
emotions_tracks_nrc <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("nrc"), by = "word") %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
mutate(sentiment = as.factor(sentiment)) %>%
group_by(album, track_title, track_n, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n) %>%
ungroup()
emotions_tracks_nrc
emotions_tracks_nrc  %>%
ggplot() +
geom_boxplot(aes(x = reorder(sentiment, percent), y = percent, fill = sentiment)) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
scale_fill_brewer(palette = "Spectral") +
ggtitle("Distribution of Sentiments by Album Aggregated by Track") +
labs(x = "Detected Sentiments", y = "Percentage") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
legend.position = "none",
axis.text.x = element_text(size = 11, face = "bold"),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_tracks_nrc %>%
ggplot(aes(reorder(track_title, track_n), percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Sentiments by Albums") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_tracks_nrc %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Individual Sentiments by Album") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 8, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_grid(sentiment ~ album, scales = "free_x")
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
emotions_tracks_nrc %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
binomial_smooth(formula = y ~ splines::ns(x, 3), color = "#000000")   +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Individual Sentiments by Album") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 8, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_grid(sentiment ~ album, scales = "free_x")
get_sentiments("bing") %>%
count(sentiment)
get_sentiments("nrc") %>%
count(sentiment)
get_sentiments("afinn") %>%
count(value)
get_sentiments("afinn") %>%
select(value) %>%
mutate(sentiment = if_else(value > 0, "positive", "negative", "NA")) %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
emotions_lyrics_bing %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
tidy_lyrics_nsw %>%
left_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
emotions_lyrics_afinn <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("afinn"), by = "word") %>%
filter(!grepl('[0-9]', word))
emotions_lyrics_afinn %>%
select(value) %>%
mutate(sentiment = if_else(value > 0, "positive", "negative", "NA")) %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
afinn_scores <- emotions_lyrics_afinn %>%
replace_na(replace = list(value = 0)) %>%
group_by(index = album, track_title) %>%
summarize(sentiment = sum(value)) %>%
mutate(lexicon = "AFINN")
bing_nrc_scores <- bind_rows(
tidy_lyrics_nsw %>%
inner_join(get_sentiments("bing")) %>%
mutate(lexicon = "Bing"),
tidy_lyrics %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive", "negative"))) %>%
mutate(lexicon = "NRC")) %>%
# from here we count the sentiments, spread on positive/negative,
# then create the final sentiment score:
count(lexicon, index = album, track_title, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(lexicon = as.factor(lexicon),
sentiment = positive - negative)
all_lexicons <- bind_rows(afinn_scores, bing_nrc_scores) %>%
select(-negative, -positive)
lexicon_cols <- c("AFINN" = "#ae5a41", "NRC" = "#559e83", "Bing" = "#1b85b8")
all_lexicons %>%
ggplot(aes(track_title, sentiment, fill = lexicon)) +
geom_col(show.legend = FALSE) +
facet_wrap(~lexicon, ncol = 1, scales = "free_y") +
scale_fill_manual(values = lexicon_cols) +
ggtitle("Comparison of Sentiments", subtitle = "by track order") +
labs(x = "Index of All Songs", y = "Sentiment Score") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_blank()) +
facet_grid(lexicon ~ index, scales = "free_x")
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::serve_site()
install.packages(c("bayestestR", "ps"))
install.packages("distill")
install.packages("effectsize")
# Amy Cashin
#Exam 2
#12/2/2020
# I hereby declare that I had no intent nor did I cheat on any or all of this assessment. Additionally I did not seek help or  # guidance from any individual and affirm that all work is my own. Should I be found cheating, the minimum penalty is an  # earned grade of F for the course consistent with the WVU Academic Integrity Statement. I also understand that I may  # also be referred to the appropriate party for possible further disciplinary action including, but not limited to expulsion
# from West Virginia University
#load up data and install packages
library(tidyverse)
library(infer)
library(patchwork)
library(viridis)
# use names to see what each variable is labeled---
names(mass_shootings_long)
#solution: "State""Notes" "Type""Satisfied""Incident ID"  "Incident Date"  "year" "City Or County" "Address"
#"Killed" "Injured" "Total" "House"  "Control"
# Use head to have a look at the data
head(mass_shootings_long)
#use sapply to have a look at the variables and what their class is.
sapply(mass_shootings_long, class)
#solution  State          Notes           Type      Satisfied
#         "character"    "character"    "character"    "character"
#Incident ID  Incident Date           year City Or County
#"numeric"    "character"      "numeric"    "character"
#Address         Killed        Injured          Total
#"character"      "numeric"      "numeric"      "numeric"
#House        Control
#"character"    "character"
dem <- filter(mass_shootings_long, House == "Democrats")
# use names to see what each variable is labeled---
names(mass_shootings_long)
library(tidyverse)
library(infer)
library(patchwork)
library(viridis)
library(tidyverse)
library(infer)
library(patchwork)
library(viridis)
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read.csv("yawning_data.csv")
setwd("~/Dropbox/My Mac (Skynet.hsd1.wv.comcast.net)/Downloads")
#check out a contingency table to see if data loaded correctly (totally not necessary, but reassuring)
#make the table
table<-(table(data$group, data$yawn))
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read.csv("yawning_data.csv")
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read.csv("yawning_data.csv")
#load tidyverse
library(tidyverse)
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read.csv("yawning_data.csv")
#check out a contingency table to see if data loaded correctly (totally not necessary, but reassuring)
#make the table
table<-(table(data$group, data$yawn))
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read_csv("yawning_data.csv")
#check out a contingency table to see if data loaded correctly (totally not necessary, but reassuring)
#make the table
table<-(table(data$group, data$yawn))
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read_csv("yawning_data.csv")
#load tidyverse
library(tidyverse)
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read_csv("yawning_data.csv")
setwd("~/Documents/WVU/Teaching/Current/EDP 613/Tasks/Data Explorations/Student Submissions")
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read_csv("yawning_data.csv")
#check out a contingency table to see if data loaded correctly (totally not necessary, but reassuring)
#make the table
table<-(table(data$group, data$yawn))
#print the table
print(table)
#perform a chi-square test
print(chisq.test(data$group,data$yawn, correct=F))
#Hmm, Fischer's exact test is suitable for small sample sizes.
#perform Fischer's exact test, one tail
test<-fisher.test(data$group, data$yawn, alternative="greater")
#print the results
print(test)
#calculate the number of subjects in each group to have an 80% chance of detecting the effect
print(power.prop.test(power=0.8,p1=0.25,p2=0.29, alternative="one.sided"))
library(pwr)
install.packages("pwr")
library(pwr)
#load my csv, which I have conveniently located in the same project folder as this code, into a dataframe
data<-read_csv("yawning_data.csv")
pwr.chisq.test(data$group,data$yawn)
?pwr.chisq.test
load("/Users/skynet/Documents/WVU/Teaching/Current/EDP 613/Tasks/Exams/e1/Student Submissions/Data Portion/Exam 1 Data Exploration Portion_bjhouk_attempt_2020-10-21-23-53-23_Exam 1 Houk R Script.RData")
install.packages(c("data.table", "flextable", "insight", "parameters", "stopwords"))
install.packages("HardyWeinberg")
library(xml2)
webpage_url <- "https://stats.idre.ucla.edu/other/mult-pkg/whatstat/"
webpage <- xml2::read_html(webpage_url)
WebTable<- rvest::html_table(webpage)[[1]] %>%
tibble::as_tibble(.name_repair = "unique")
StatsTable <- WebTable %>%
rename(`Type of Dependent Variables` = `Nature of Dependent Variable(s)`) %>%
rename(`Type of Independent Variables`= `Nature of Independent Variables`) %>%
dplyr::select(-starts_with("How to")) %>%
# add_column(Link = "") %>%
filter(`Test(s)` != "")
rvest::html_table(webpage)[[1]] %>%
tibble::as_tibble(.name_repair = "unique")
names(xWebTable)
names(WebTable)
StatsTable <- WebTable %>%
rename(`Type of Dependent Variables` = `Nature of Dependent Variable(s)*`) %>%
rename(`Type of Independent Variables`= `Nature of Independent Variables`) %>%
dplyr::select(-starts_with("How to")) %>%
# add_column(Link = "") %>%
filter(`Test(s)` != "")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
xaringan:::inf_mr()
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::check_netlify()
blogdown::check_netlify()
blogdown::check_netlify()
blogdown::check_config()
blogdown::check_config()
blogdown::check_content()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
read_csv("dc.csv")
library(knitr)
library(kableExtra)
library(tidyverse)
library(fontawesome)
unchecked <- as.character(fontawesome::fa("square", fill = "steelblue"))
checked <- as.character(fontawesome::fa("check-square", fill = "steelblue"))
read_csv("dc.csv")
read_csv("dc.csv") %>%
as_tibble()
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
))
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`)
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`)
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
filter_all(any_vars(!is.na(.))) %>%
replace(., is.na(.), "")
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
filter_all(any_vars(!is.na(.)))
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
filter_all(any_vars(!is.na(.))) %>%
replace(is.na(.), "")
read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
filter_all(any_vars(!is.na(.)))
unchecked <- as.character(fontawesome::fa("square", fill = "steelblue"))
checked <- as.character(fontawesome::fa("check-square", fill = "steelblue"))
dc_schedule <- read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
mutate(Track = as.character(Track)) %>%
filter_all(any_vars(!is.na(.))) %>%
replace(is.na(.), "")
library(knitr)
library(kableExtra)
library(tidyverse)
library(fontawesome)
unchecked <- as.character(fontawesome::fa("square", fill = "steelblue"))
checked <- as.character(fontawesome::fa("check-square", fill = "steelblue"))
dc_schedule <- read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
mutate(Track = as.character(Track)) %>%
filter_all(any_vars(!is.na(.))) %>%
replace(is.na(.), "")
library(knitr)
library(kableExtra)
library(tidyverse)
library(fontawesome)
unchecked <- as.character(fontawesome::fa("square", fill = "steelblue"))
checked <- as.character(fontawesome::fa("check-square", fill = "steelblue"))
dc_schedule <- read_csv("dc.csv") %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
)) %>%
select(-Group, -Chapters_long, -`Due by_short`) %>%
rename(`Due by` = `Due by_long`) %>%
rename(`Chapters covered` = Chapters_wide) %>%
mutate(Track = as.character(Track)) %>%
filter_all(any_vars(!is.na(.))) %>%
replace(is.na(.), "")
kable(dc_schedule,
escape = FALSE,
align = 'clcccll') %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "5em") %>%
column_spec(2, width = "15em") %>%
column_spec(3, width = "10em") %>%
column_spec(4, width = "10em") %>%
column_spec(5, width = "30em") %>%
column_spec(6, width = "50em")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
servr::browse_last()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
