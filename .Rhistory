pvals <- getResults(tab, "p.overall")
pvals
export_table <- createTable(tab)
createTable(tab)
class(tab)
comparison <- compareGroups(group ~ ., predimed)
comparison
class(comparison)
getResults(comparison, "p.overall")
export_table <- createTable(comparison)
export_table
# create an APA formatted table
export_tab <- createTable(comparison)
# create an APA formatted table
export_comparison <- createTable(comparison)
library(tidyverse)
# take a look
predimed %>%
head()
# take a look in a descriptive table
tab <- descrTable(group ~ ., predimed)
tab
class(tab)
comparison <- compareGroups(group ~ ., predimed)
comparison
# check for the compareGroups class
class(comparison)
# get the p-values
pvals <- getResults(comparison, "p.overall")
# create an APA formatted table
export_comparison <- createTable(comparison)
export_comparison
# take a look at some descriptive statistics
plot(comparison["sex"]) # barplot
plot(comparison["sex"])
# take a look at some descriptive statistics
plot(tab["sex"]) # barplot
# take a look at some descriptive statistics
plot(export_comparison["sex"]) # barplot
plot(export_comparison["age"]) # histogram and normality plot
comparison
group
# take a look
predimed %>%
head()
# subsetting: looking at some variables
compareGroups(group ~ age + smoke + waist + hormo, data = predimed)
# subsetting: looking at some variables
compareGroups(group ~ age + smoke, data = predimed)
compareGroups(group ~ age + smoke + waist + hormo, data = predimed,
subset = sex == "Male")
# subsetting: looking at the female and male participants only
compareGroups(group ~ age + smoke + waist + hormo, data = predimed,
subset = sex == "Female")
compareGroups(group ~ age + smoke + waist + hormo, data = predimed,
subset = sex == "Male")
# take a look
predimed %>%
head()
# subsetting: looking at some variables
compareGroups(group ~ age + smoke + waist + hyperchol, data = predimed)
# subsetting: looking at the female participants only
compareGroups(group ~ age + smoke + waist + hyperchol, data = predimed,
subset = sex == "Female")
xaringan:::inf_mr()
# GUI
cGroupsGUI(predimed)
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-11.Rmd")
pagedown::chrome_print("Slides-Week-11R.Rmd")
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("Slides-Week-11.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-11.Rmd")
pagedown::chrome_print("Slides-Week-11R.Rmd")
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-11.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-11.Rmd")
pagedown::chrome_print("Slides-Week-11R.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-11.Rmd")
install.packages("pagedown")
?pagedown::chrome_print
pagedown::chrome_print("Slides-Week-11.Rmd", format = "pdf")
pagedown::chrome_print("Slides-Week-11R.Rmd", format = "pdf")
pagedown::chrome_print("Slides-Week-11R.Rmd", format = "pdf")
pagedown::chrome_print("Slides-Week-11.Rmd", format = "pdf", timeout = 90)
pagedown::chrome_print("Slides-Week-11R.Rmd", format = "pdf", timeout = 90)
pagedown::chrome_print("Slides-Week-11R.Rmd", format = "pdf", timeout = 90)
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
View(banana_data)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("compareGroups")
blogdown::build_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(global.par = TRUE)
library(tidyverse)
library(patchwork)
library(knitr)
library(kableExtra)
par(mar=c(3,3,3,0)) #it's important to have that in a separate chunk
# We are using the tidyverse family which is essentially the gold standard for
# data wrangling:
library(tidyverse)
library(scales)
# text mining and annoying wordclouds based on the tidyverse family
library(tidytext)
library(ggwordcloud)
library(textstem)
library(textdata)
library(wordcloud)
# getting lyrics
library(genius) # Allows you to download lyrics for an entire album in a tidy format from
# genius.com
# the aesthetics
library(viridis)
library(RColorBrewer)
library(hrbrthemes)
hrbrthemes::import_roboto_condensed()
american_beauty <- genius_album(artist = "The Grateful Dead", album = "***American Beauty***")
american_beauty
shakedown_street <- genius_album(artist = "The Grateful Dead", album = "***Shakedown Street***")
shakedown_street
str(shakedown_street)
american_beauty_tagged <- american_beauty %>%
mutate(album = "***American Beauty***") %>%
select(album, track_title, track_n, line, lyric)
american_beauty
shakedown_street_tagged <- shakedown_street %>%
mutate(album = "***Shakedown Street***") %>%
select(album, track_title, track_n, line, lyric)
shakedown_street
all_albums <- rbind(american_beauty_tagged, shakedown_street_tagged)
all_albums
unique(all_albums$album)
tidy_lyrics<- all_albums %>%
group_by(album) %>%
unnest_tokens(word, lyric)
tidy_lyrics %>%
head()
tidy_lyrics$word <- lemmatize_words(tidy_lyrics$word)
data("stop_words")
tidy_lyrics_nsw <- tidy_lyrics %>%
ungroup() %>%
anti_join(stop_words)
tidy_lyrics_nsw %>%
head()
tidy_lyrics_nsw %>%
tail()
frequencies_lyrics <- tidy_lyrics_nsw %>%
group_by(album) %>%
count(word, sort = TRUE)
set.seed(99)
ggplot(frequencies_lyrics, aes(label = word, size = n, color = album)) +
geom_text_wordcloud() +
scale_radius(range = c(0, 20)) +
theme_minimal()
set.seed(99)
frequencies_lyrics %>%
filter(n > 1) %>%
ggplot(aes(label = word, size = n, color = album)) +
scale_color_manual(values = c("#5bc0de", "#5cb85c")) +
geom_text_wordcloud(rm_outside = TRUE, shape = "circle") +
scale_radius(range = c(4, 15)) +
theme_minimal() +
facet_grid(.~ album) +
theme(panel.spacing = unit(0.5, "cm"))
frequencies_lyrics %>%
filter(n > 5) %>%
group_by(album) %>%
count(word, sort = TRUE) %>%
mutate(word = reorder(word, n)) %>%
ungroup() %>%
mutate(album = reorder(album, n)) %>%
ggplot(aes(word, n)) +
geom_bar(stat = "identity") +
facet_grid(~ album) +
xlab(NULL) +
coord_flip() +
theme(axis.text.y = element_text(size = 8))
lexicons <- tibble(
lexicon = c("Bing",
"NRC",
"AFINN"),
description = c("A backend of [Microsoft Bing](https://www.bing.com/){target='_blank'}), this lexicon may be used to assesses open text for its polarities in sentiments.",
"One of the most utilized and researched lexicons that provides information about emotional context.",
"A lexicon used for measuring psychological valence by assigning a level of severity to a term."),
`variable type` = c("categorical",
"categorical",
"numerical"),
sentiments = c("positive, negative",
"anger, anticipation, disgust, fear, joy, sadness, surprise, trust",
"-5,-4,-3,-2,-1,0,1,2,3,4,5"),
`more information` = c("[Bing](https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html){target='_blank'}",
"[NRC](https://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm){target='_blank'}",
"[AFINN](https://github.com/fnielsen/afinn){target='_blank'}")
)
lexicons %>%
kable(align = 'lllc',
booktabs = TRUE,
linesep = "") %>%
kable_styling(full_width = FALSE)
emotions_lyrics_bing <- tidy_lyrics_nsw %>%
filter(!grepl('[0-9]', word)) %>%
left_join(get_sentiments("bing"), by = "word") %>%
group_by(album) %>%
mutate(sentiment = ifelse(is.na(sentiment), 'neutral', sentiment))
emotions_lyrics_bing
emotions_lyrics_bing %>%
count(sentiment)
word_count <- emotions_lyrics_bing %>%
count(word, sentiment, sort = TRUE)
word_count
top_sentiments_bing <-  word_count %>%
filter(sentiment != 'neutral') %>%
group_by(sentiment) %>%
top_n(10, n) %>%
mutate(num = ifelse(sentiment == "negative", -n, n)) %>%
select(-n) %>%
mutate(word = reorder(word, num)) %>%
ungroup()
top_sentiments_bing
ggplot(top_sentiments_bing, aes(reorder(word, num), num, fill = sentiment)) +
geom_bar(stat = 'identity', alpha = 0.75) +
scale_fill_manual(guide = FALSE, values = c("#d9534f", "#428bca")) +
scale_y_continuous(limits = c(-10, 55), breaks = pretty_breaks(7)) +
labs(x = '', y = "Number of Occurrences",
title = 'Top Sentiments of Lyrics',
subtitle = 'Most Common Positive and Negative Words') +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 1.1),
panel.spacing = unit(0.5, "cm")) +
facet_wrap(album ~ ., scales = "free_x")
emotions_lyrics_bing %>%
filter(album == "***American Beauty***") %>%
filter(sentiment != "neutral") %>%
count(word, sentiment, sort = TRUE) %>%
spread(sentiment, n, fill = 0L) %>%
as.data.frame() %>%
remove_rownames() %>%
column_to_rownames("word") %>%
select(-album) %>%
comparison.cloud(colors = c("#d9534f", "#428bca"), title.size = 1.5)
emotions_lyrics_bing %>%
filter(album == "***Shakedown Street***") %>%
filter(sentiment != "neutral") %>%
count(word, sentiment, sort = TRUE) %>%
spread(sentiment, n, fill = 0L) %>%
as.data.frame() %>%
remove_rownames() %>%
column_to_rownames("word") %>%
select(-album) %>%
comparison.cloud(colors = c("#d9534f", "#428bca"), title.size = 1.5)
pos_neg_bing_album <- tidy_lyrics_nsw %>%
filter(!grepl('[0-9]', word)) %>%
left_join(get_sentiments("bing"), by = "word") %>%
mutate(sentiment = ifelse(is.na(sentiment), 'neutral', sentiment)) %>%
group_by(album, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n) %>%
ungroup()
pos_neg_bing_album
pos_neg_bing_album %>%
filter(sentiment != "neutral") %>%
ggplot(aes(x = album, y = percent, color = sentiment, group = sentiment)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
labs(x = "Album", y = "Emotion Words Count (as %)") +
scale_color_manual(values = c(positive = "#d9534f", negative = "#428bca")) +
ggtitle("Proportion of Positive and Negative Words by Album",
subtitle = "Bing lexicon") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold"))
pos_neg_bing_track <- tidy_lyrics_nsw %>%
filter(!grepl('[0-9]', word)) %>%
left_join(get_sentiments("bing"), by = "word") %>%
mutate(sentiment = ifelse(is.na(sentiment), 'neutral', sentiment)) %>%
group_by(album, track_title, track_n, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n)
pos_neg_bing_track
pos_neg_bing_track %>%
filter(sentiment != "neutral") %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
labs(x = "Album", y = "Sentiment Count (as %)") +
scale_color_manual(values = c(positive = "#d9534f", negative = "#428bca")) +
ggtitle("Proportion of Positive and Negative Words by Track",
subtitle = "Bing lexicon") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_album_nrc <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("nrc"), by = "word") %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
mutate(sentiment = as.factor(sentiment)) %>%
group_by(album, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n) %>%
ungroup()
emotions_album_nrc
emotions_album_nrc %>%
ggplot() +
geom_boxplot(aes(x = reorder(sentiment, percent), y = percent, fill = sentiment)) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
scale_fill_brewer(palette = "Spectral") +
ggtitle("Distribution of Sentiments by Album") +
labs(x = "Sentiment", y = "Percentage") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
legend.position = "none",
axis.text.x = element_text(size = 11, face = "bold"),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free")
emotions_tracks_nrc <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("nrc"), by = "word") %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
mutate(sentiment = as.factor(sentiment)) %>%
group_by(album, track_title, track_n, sentiment) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
select(-n) %>%
ungroup()
emotions_tracks_nrc
emotions_tracks_nrc  %>%
ggplot() +
geom_boxplot(aes(x = reorder(sentiment, percent), y = percent, fill = sentiment)) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
scale_fill_brewer(palette = "Spectral") +
ggtitle("Distribution of Sentiments by Album Aggregated by Track") +
labs(x = "Detected Sentiments", y = "Percentage") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
legend.position = "none",
axis.text.x = element_text(size = 11, face = "bold"),
axis.text.y = element_text(size = 11, face = "bold")) +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_tracks_nrc %>%
ggplot(aes(reorder(track_title, track_n), percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Sentiments by Albums") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 11, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_wrap(. ~ album, ncol = 1, scales = "free_x")
emotions_tracks_nrc %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Individual Sentiments by Album") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 8, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_grid(sentiment ~ album, scales = "free_x")
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
emotions_tracks_nrc %>%
ggplot(aes(x = reorder(track_title, track_n), y = percent, color = sentiment,
group = sentiment)) +
geom_line(size = 1.5) +
geom_point(size = 3.5) +
binomial_smooth(formula = y ~ splines::ns(x, 3), color = "#000000")   +
scale_y_continuous(breaks = pretty_breaks(5), labels = percent_format()) +
xlab("Album") + ylab("Proportion of Sentiments") +
ggtitle("Individual Sentiments by Album") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 45, hjust = 1, size = 11, face = "bold"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 8, face = "bold")) +
scale_color_brewer(palette = "Spectral") +
facet_grid(sentiment ~ album, scales = "free_x")
get_sentiments("bing") %>%
count(sentiment)
get_sentiments("nrc") %>%
count(sentiment)
get_sentiments("afinn") %>%
count(value)
get_sentiments("afinn") %>%
select(value) %>%
mutate(sentiment = if_else(value > 0, "positive", "negative", "NA")) %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
emotions_lyrics_bing %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
tidy_lyrics_nsw %>%
left_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
emotions_lyrics_afinn <- tidy_lyrics_nsw  %>%
left_join(get_sentiments("afinn"), by = "word") %>%
filter(!grepl('[0-9]', word))
emotions_lyrics_afinn %>%
select(value) %>%
mutate(sentiment = if_else(value > 0, "positive", "negative", "NA")) %>%
group_by(sentiment) %>%
summarize(sum = n()) %>%
filter(sentiment == "positive" | sentiment == "negative")
afinn_scores <- emotions_lyrics_afinn %>%
replace_na(replace = list(value = 0)) %>%
group_by(index = album, track_title) %>%
summarize(sentiment = sum(value)) %>%
mutate(lexicon = "AFINN")
bing_nrc_scores <- bind_rows(
tidy_lyrics_nsw %>%
inner_join(get_sentiments("bing")) %>%
mutate(lexicon = "Bing"),
tidy_lyrics %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive", "negative"))) %>%
mutate(lexicon = "NRC")) %>%
# from here we count the sentiments, spread on positive/negative,
# then create the final sentiment score:
count(lexicon, index = album, track_title, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(lexicon = as.factor(lexicon),
sentiment = positive - negative)
all_lexicons <- bind_rows(afinn_scores, bing_nrc_scores) %>%
select(-negative, -positive)
lexicon_cols <- c("AFINN" = "#ae5a41", "NRC" = "#559e83", "Bing" = "#1b85b8")
all_lexicons %>%
ggplot(aes(track_title, sentiment, fill = lexicon)) +
geom_col(show.legend = FALSE) +
facet_wrap(~lexicon, ncol = 1, scales = "free_y") +
scale_fill_manual(values = lexicon_cols) +
ggtitle("Comparison of Sentiments", subtitle = "by track order") +
labs(x = "Index of All Songs", y = "Sentiment Score") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
axis.text.x = element_blank()) +
facet_grid(lexicon ~ index, scales = "free_x")
blogdown::serve_site()
