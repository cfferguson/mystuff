legend.text = element_text(color = "#FFFFFF"))
set.seed(834)
df <- data.frame(x = rnorm(n, mean, sd))
ggplot(df, aes(x = x,
mean = 0,
sd = 1,
binwidth = 0.5,
n = n)) +
theme_bw() +
geom_histogram(binwidth=0.5,
aes(fill=..count..),
show.legend = FALSE) +
scale_fill_distiller(palette = "Spectral") +
theme(
panel.background = element_rect(fill = "#212121"),
plot.background = element_rect(fill = "#212121", color = "#212121"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
theme_void(base_family = "roboto") +
theme(legend.title = element_text(color = "#FFFFFF"),
legend.text = element_text(color = "#FFFFFF"))
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
read_csv("dc.csv",
show_col_types = FALSE) %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
))
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613/content/datacamp")
read_csv("dc.csv",
show_col_types = FALSE) %>%
as_tibble() %>%
mutate(Required = case_when(
Required == "checked" ~ as.character(fontawesome::fa("check-circle", fill = "#428bca", height = "15px")),
Required == "unchecked" ~ as.character(fontawesome::fa("times-circle", fill = "#d9534f", height = "15px"))
))
blogdown::build_site()
blogdown::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-2.Rmd")
pagedown::chrome_print("Slides-Week-2R.Rmd")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(knitr)
purl("Slides-Week-2.Rmd")
purl("Slides-Week-2R.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(knitr)
purl("Slides-Week-2.Rmd")
purl("Slides-Week-2R.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(knitr)
purl("Slides-Week-2.Rmd")
purl("Slides-Week-2R.Rmd")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pagedown::chrome_print("Slides-Week-2.Rmd")
pagedown::chrome_print("Slides-Week-2R.Rmd")
xaringan:::inf_mr()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(knitr)
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(knitr)
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
xaringan:::inf_mr()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(knitr)
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613/static/slides/Week 1")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(knitr)
# purl("Slides-Week-1.Rmd")
# purl("Slides-Week-1R.Rmd")
pagedown::chrome_print("Slides-Week-1.html")
blogdown::build_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
blogdown::build_site()
blogdown::serve_site()
random_tib <-
(
pos = c(1,2,3,4,5,6)
val = c(2,4,7,10,12,14)
); random_tib
random_tib <-
(
pos = c(1,2,3,4,5,6),
val = c(2,4,7,10,12,14)
); random_tib
(
pos = c(1,2,3,4,5,6),
val = c(2,4,7,10,12,14)
)
random_tib <-
tibble(
pos = c(1,2,3,4,5,6),
val = c(2,4,7,10,12,14)
); random_tib
xaringan:::inf_mr()
distribution_list +
geom_segment(aes(x = median(values), y = 0,
xend = median(values), yend = -0.02),
color = "#ffffff",
linetype = "dashed",
size = 1) +
geom_text(data = random_data %>%
group_by(example) %>%
summarise(values = median(values)),
aes(label="cut point",
x = median(values),
y = -0.1),
# position = position_nudge(y = 0.07),
color = "#ffffff",
size = 4) +
facet_wrap("example",
scales = "free",
nrow = 1,
strip.position="left") +
theme(strip.text = element_blank())
distribution_list +
geom_segment(aes(x = median(values), y = 0,
xend = median(values), yend = -0.02),
color = "#ffffff",
linetype = "dashed",
size = 1) +
geom_tile()
distribution_list +
geom_segment(aes(x = median(values), y = 0,
xend = median(values), yend = -0.02),
color = "#ffffff",
linetype = "dashed",
size = 1) +
geom_tile(y = ..count..)
ggplot(random_data,
aes(x = values)) +
geom_tile(y = ..count..)
ggplot(random_data,
aes(x = values)) +
geom_tile(y = ..counts..)
ggplot(random_data,
aes(x = values)) +
geom_tile(aes(y = ..count..))
ggplot(random_data,
aes(x = values)) +
geom_tile(aes(y = ..density..))
ggplot(random_data,
aes(x = values)) +
geom_tile(aes(fill = ..count..))
ggplot(random_data,
aes(x = values)) +
geom_tile(aes(fill = ..count..))
noskew_tib
tibble(sid = 1:pop,
spop = noskew)
random_data
ggplot(random_data,
aes(x = factor(values))) +
geom_tile(aes(fill = ..count..))
ggplot(random_data,
aes(x = factor(values))) +
geom_tile(aes())
ggplot(random_data,
aes(x = factor(values))) +
geom_tile(aes(y = ..count..))
ggplot(random_data,
aes(x = factor(values))) +
geom_tile(aes(y = ..density..))
ggplot(random_data,
aes(x = factor(values))) +
stat_count()
?stat_count
ggplot(random_data,
aes(x = factor(values)))
istribution_list +
geom_segment(aes(x = median(values), y = 0,
xend = median(values), yend = -0.02),
color = "#ffffff",
linetype = "dashed",
size = 1)
distribution_list +
geom_segment(aes(x = median(values), y = 0,
xend = median(values), yend = -0.02),
color = "#ffffff",
linetype = "dashed",
size = 1)
ggplot(random_data,
aes(x = values))
ggplot(random_data,
aes(x = values,
y = ..count..))
ggplot(random_data,
aes(x = values,
y = ..count..))
random_data
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(density),
fill = after_stat(density)),
bins = 20,
show.legend = FALSE
)
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(density),
fill = after_stat(density)),
bins = 20,
show.legend = FALSE
) +
geom_tile()
geom_tile(aes(y = after_stat(density))
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(density),
fill = after_stat(density)),
bins = 20,
show.legend = FALSE
) +
geom_tile(aes(y = after_stat(density)))
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(density),
fill = after_stat(density)),
bins = 20,
show.legend = FALSE
)
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(count),
fill = after_stat(count)),
bins = 20,
show.legend = FALSE
) +
geom_tile(aes(y = after_stat(density)))
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(count),
fill = after_stat(count)),
bins = 20,
show.legend = FALSE
)
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(count),
fill = after_stat(count)),
bins = 20,
show.legend = FALSE
) +
geom_tile(aes(y = ..count..)))
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(count),
fill = after_stat(count)),
bins = 20,
show.legend = FALSE
) +
geom_tile(aes(y = ..count..))
ggplot(random_data,
aes(x = values)) +
geom_histogram(
aes(y = after_stat(count),
fill = after_stat(count)),
bins = 20,
show.legend = FALSE
)
random_data
ggplot(random_data,
aes(x = values)) +
geom_raster(aes(fill = value))
ggplot(random_data,
aes(x = values)) +
geom_raster(aes(fill = values))
random_data
max(random_data$values)
min(random_data$values)
tibble::tibble(
example = factor(names(draws),
levels = c("Skewed Left\n\nmean < median < mode",
"Normal\n\nmean = median = mode",
"Skewed Right\n\nmean > median > mode")),
values = draws
) %>%
tidyr::unnest(values) %>%
group_by(grp = cut(values, c(-15, 2, 4, 10)))
tibble::tibble(
example = factor(names(draws),
levels = c("Skewed Left\n\nmean < median < mode",
"Normal\n\nmean = median = mode",
"Skewed Right\n\nmean > median > mode")),
values = draws
) %>%
tidyr::unnest(values) %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10)))
tibble::tibble(
example = factor(names(draws),
levels = c("Skewed Left\n\nmean < median < mode",
"Normal\n\nmean = median = mode",
"Skewed Right\n\nmean > median > mode")),
values = draws
) %>%
tidyr::unnest(values) %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
summarise(count = sum(count))
tibble::tibble(
example = factor(names(draws),
levels = c("Skewed Left\n\nmean < median < mode",
"Normal\n\nmean = median = mode",
"Skewed Right\n\nmean > median > mode")),
values = draws
) %>%
tidyr::unnest(values) %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
tally()
random_data %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
tally()
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
tally()
random_data
ranged_data
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
tally()
random_data %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10))) %>%
tally()
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15, -10, -5, 0, 5, 10, 15))) %>%
tally()
ranged_data
-15:15
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15:15))) %>%
tally()
ranged_data
ranged_data
?tally
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15:15))) %>%
tally(name = count)
ranged_data
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15:15))) %>%
tally(name = count)
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15:15))) %>%
tally(name = "count")
ranged_data <-
random_data %>%
group_by(grp = cut(values, c(-15:15))) %>%
tally(name = "count"); ranged_data
ranged_data <-
random_data %>%
group_by(range = cut(values, c(-15:15))) %>%
tally(name = "count"); ranged_data
ggplot(random_data,
aes(x = range, y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
random_data
ggplot(ranged_data,
aes(x = range, y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
ggplot(ranged_data,
aes(x = range, y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE) +
coord_equal()
ranged_data
ggplot(ranged_data,
aes(x = range, y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
ggplot(ranged_data,
aes(x = range, y = count, fill = range)) +
geom_bar()
ggplot(ranged_data,
aes(x = range,
y = count, fill = range)) +
geom_histogram()
ggplot(ranged_data,
aes(x = range,
y = factor(count), fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
random_data
ranged_data
ggplot(ranged_data,
aes(x = range,
y = factor(count), fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
ggplot(ranged_data,
aes(x = range,
y = count, fill = range))
ggplot(ranged_data,
aes(x = range,
y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
random_data <-
tibble::tibble(
example = factor(names(draws),
levels = c("Skewed Left\n\nmean < median < mode",
"Normal\n\nmean = median = mode",
"Skewed Right\n\nmean > median > mode")),
values = draws
) %>%
tidyr::unnest(values)
max(random_data$values)
min(random_data$values)
ggplot(ranged_data,
aes(x = range,
y = count, fill = range)) +
geom_tile(aes(fill = range),
color = "#FFFFFF",
show.legend = FALSE)
here::here()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp613")
here::here()
xaringan:::inf_mr()
blogdown:::insert_image_addin()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::insert_image_addin()
xaringan:::inf_mr()
servr::daemon_stop(5)
